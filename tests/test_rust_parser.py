"""
Rust 解析器测试
"""

import tempfile
import unittest
from pathlib import Path

from depx.parsers.rust import RustParser
from depx.parsers.base import DependencyType, ProjectType


class TestRustParser(unittest.TestCase):
    """Rust 解析器测试类"""

    def setUp(self):
        """测试前准备"""
        self.parser = RustParser()
        self.temp_dir = Path(tempfile.mkdtemp())

    def tearDown(self):
        """测试后清理"""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)

    def test_project_type(self):
        """测试项目类型"""
        self.assertEqual(self.parser.project_type, ProjectType.RUST)

    def test_config_files(self):
        """测试配置文件列表"""
        expected_files = ["Cargo.toml", "Cargo.lock"]
        self.assertEqual(self.parser.config_files, expected_files)

    def test_can_parse_rust_project(self):
        """测试识别 Rust 项目"""
        # 创建 Cargo.toml 文件
        cargo_file = self.temp_dir / "Cargo.toml"
        cargo_file.write_text("""[package]
name = "test-project"
version = "0.1.0"
edition = "2021"

[dependencies]
serde = "1.0"
""")

        self.assertTrue(self.parser.can_parse(self.temp_dir))

    def test_cannot_parse_non_rust_project(self):
        """测试不识别非 Rust 项目"""
        # 创建非 Rust 项目文件
        package_json = self.temp_dir / "package.json"
        package_json.write_text('{"name": "test"}')

        self.assertFalse(self.parser.can_parse(self.temp_dir))

    def test_parse_rust_project(self):
        """测试解析 Rust 项目"""
        # 创建 Cargo.toml 文件
        cargo_file = self.temp_dir / "Cargo.toml"
        cargo_content = """[package]
name = "test-project"
version = "0.1.0"
edition = "2021"

[dependencies]
serde = { version = "1.0", features = ["derive"] }
tokio = "1.0"

[dev-dependencies]
tokio-test = "0.4"

[build-dependencies]
cc = "1.0"
"""
        cargo_file.write_text(cargo_content)

        project_info = self.parser.parse_project(self.temp_dir)

        self.assertIsNotNone(project_info)
        self.assertEqual(project_info.name, "test-project")
        self.assertEqual(project_info.project_type, ProjectType.RUST)
        self.assertEqual(len(project_info.dependencies), 4)

        # 检查依赖类型
        serde_dep = next(
            (dep for dep in project_info.dependencies if dep.name == "serde"), None
        )
        self.assertIsNotNone(serde_dep)
        self.assertEqual(serde_dep.dependency_type, DependencyType.PRODUCTION)

        tokio_test_dep = next(
            (dep for dep in project_info.dependencies if dep.name == "tokio-test"), None
        )
        self.assertIsNotNone(tokio_test_dep)
        self.assertEqual(tokio_test_dep.dependency_type, DependencyType.DEVELOPMENT)

        cc_dep = next(
            (dep for dep in project_info.dependencies if dep.name == "cc"), None
        )
        self.assertIsNotNone(cc_dep)
        self.assertEqual(cc_dep.dependency_type, DependencyType.DEVELOPMENT)

    def test_parse_cargo_lock(self):
        """测试解析 Cargo.lock 文件"""
        # 创建 Cargo.toml
        cargo_toml = self.temp_dir / "Cargo.toml"
        cargo_toml.write_text("""[package]
name = "test-project"
version = "0.1.0"

[dependencies]
serde = "1.0"
""")

        # 创建 Cargo.lock
        cargo_lock = self.temp_dir / "Cargo.lock"
        cargo_lock.write_text("""# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 3

[[package]]
name = "serde"
version = "1.0.152"
source = "registry+https://github.com/rust-lang/crates.io-index"

[[package]]
name = "test-project"
version = "0.1.0"
dependencies = [
 "serde",
]
""")

        project_info = self.parser.parse_project(self.temp_dir)

        self.assertIsNotNone(project_info)
        self.assertEqual(len(project_info.dependencies), 1)

        serde_dep = project_info.dependencies[0]
        self.assertEqual(serde_dep.name, "serde")
        self.assertEqual(serde_dep.installed_version, "1.0.152")

    def test_extract_version_from_spec(self):
        """测试从依赖规范中提取版本"""
        # 字符串版本
        self.assertEqual(self.parser._extract_version("1.0"), "1.0")

        # 字典版本
        spec = {"version": "1.0", "features": ["derive"]}
        self.assertEqual(self.parser._extract_version(spec), "1.0")

        # 空字典
        self.assertEqual(self.parser._extract_version({}), "")

        # 其他类型
        self.assertEqual(self.parser._extract_version(123), "")

    def test_get_edition(self):
        """测试获取 Rust edition"""
        cargo_file = self.temp_dir / "Cargo.toml"
        cargo_content = """[package]
name = "test"
version = "0.1.0"
edition = "2021"
"""
        cargo_file.write_text(cargo_content)

        edition = self.parser._get_edition(cargo_file)
        self.assertEqual(edition, "2021")

    def test_is_workspace(self):
        """测试检测 workspace"""
        # 普通项目
        cargo_file = self.temp_dir / "Cargo.toml"
        cargo_content = """[package]
name = "test"
version = "0.1.0"
"""
        cargo_file.write_text(cargo_content)

        self.assertFalse(self.parser._is_workspace(cargo_file))

        # Workspace 项目
        workspace_content = """[workspace]
members = [
    "crate1",
    "crate2",
]
"""
        cargo_file.write_text(workspace_content)

        self.assertTrue(self.parser._is_workspace(cargo_file))

    def test_parse_invalid_toml(self):
        """测试解析无效的 TOML 文件"""
        # 创建无效的 Cargo.toml 文件
        cargo_file = self.temp_dir / "Cargo.toml"
        cargo_file.write_text("invalid toml content [")

        project_info = self.parser.parse_project(self.temp_dir)

        # 应该能创建项目信息，但依赖列表为空
        self.assertIsNotNone(project_info)
        self.assertEqual(len(project_info.dependencies), 0)

    def test_detect_rust_version_from_toolchain(self):
        """测试从 toolchain 文件检测 Rust 版本"""
        # 创建 rust-toolchain 文件
        toolchain_file = self.temp_dir / "rust-toolchain"
        toolchain_file.write_text("1.65.0")

        version = self.parser._detect_rust_version(self.temp_dir)
        self.assertEqual(version, "1.65.0")

        # 清理
        toolchain_file.unlink()

        # 创建 rust-toolchain.toml 文件
        toolchain_toml = self.temp_dir / "rust-toolchain.toml"
        toolchain_toml.write_text("""[toolchain]
channel = "1.65.0"
""")

        version = self.parser._detect_rust_version(self.temp_dir)
        self.assertEqual(version, "1.65.0")


if __name__ == "__main__":
    unittest.main()
